#!/usr/bin/env python3
import datetime
import json
import os
import sys
import time
import logging
import requests
from getpass import getpass
from garminconnect import (
    Garmin,
    GarminConnectAuthenticationError,
    GarminConnectConnectionError,
    GarminConnectTooManyRequestsError,
)
from xml.etree import ElementTree as ET

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CONFIG_FILE = "config.json"
BASE_API_PATH = "/api/v1/gps/batch"  # <-- Statically defined path

def create_default_config():
    """Creates a default config.json if it does not exist."""
    default_config = {
        "email": "YOUR_GARMIN_EMAIL",
        "password": "YOUR_GARMIN_PASSWORD",
        "api_key": "YOUR_API_KEY",
        "base_url": "https://example.com",   # Only the protocol + domain
        "last_uploaded_time": 0              # ADDED FOR LAST UPLOADED TIME
    }
    with open(CONFIG_FILE, "w") as f:
        json.dump(default_config, f, indent=2)

def load_config():
    """
    Loads configuration from config.json.
    If file doesn't exist, create a template and exit.
    """
    if not os.path.exists(CONFIG_FILE):
        create_default_config()
        print(f"Created '{CONFIG_FILE}'. Please fill it with valid data and run again.")
        sys.exit(0)

    with open(CONFIG_FILE, "r") as f:
        config = json.load(f)

    # Basic validation check
    if (not config.get("email") or config["email"] == "YOUR_GARMIN_EMAIL" or
        not config.get("password") or config["password"] == "YOUR_GARMIN_PASSWORD" or
        not config.get("api_key") or config["api_key"] == "YOUR_API_KEY" or
        not config.get("base_url") or config["base_url"] == "https://example.com"):
        print(f"Please fill out all fields in '{CONFIG_FILE}' before running again.")
        sys.exit(0)

    # ADDED FOR LAST UPLOADED TIME - If key doesn't exist, initialize it
    if "last_uploaded_time" not in config:
        config["last_uploaded_time"] = 0

    return config

# ADDED FOR LAST UPLOADED TIME
def save_config(config):
    """
    Overwrite the config.json with current config data (including last_uploaded_time).
    """
    with open(CONFIG_FILE, "w") as f:
        json.dump(config, f, indent=2)

def safe_download(api, activity_id, dl_format, retries=3):
    """Retry logic for downloading an activity."""
    for attempt in range(retries):
        try:
            return api.download_activity(activity_id, dl_fmt=dl_format)
        except Exception as err:
            logger.warning(f"Attempt {attempt + 1} failed for activity {activity_id}: {err}")
            time.sleep(5)  # Wait 5 seconds before retry
    logger.error(f"Failed to download activity {activity_id} after {retries} attempts.")
    return None

def is_activity_indoor(activity):
    """Checks if an activity is Indoor or explicitly excluded."""
    # Check if "isIndoor" is present and True
    if activity.get("isIndoor", False):
        return True

    # Check activityType
    activity_type = activity.get("activityType", {}).get("typeKey", "").lower()
    indoor_types = ["indoor_cycling", "indoor_rowing", "treadmill_running", "indoor_swimming"]
    if activity_type in indoor_types:
        return True

    # Check activity name for typical indoor keywords
    activity_name = activity.get("activityName", "").lower()
    indoor_keywords = ["indoor", "cycling", "treadmill", "rowing", "elliptical", "trainer", "rudermaschine"]
    if any(keyword in activity_name for keyword in indoor_keywords):
        return True

    return False

def parse_gpx_to_json(gpx_data):
    """
    Given raw GPX data (bytes), parse out each trackpoint's:
      - time (converted to epoch seconds),
      - latitude,
      - longitude,
    and any optional fields with sensible defaults.
    """
    ns = {
        'default': 'http://www.topografix.com/GPX/1/1',
        'ns3': 'http://www.garmin.com/xmlschemas/TrackPointExtension/v1'
    }
    root = ET.fromstring(gpx_data)

    # Find all trackpoints
    trackpoints = root.findall('.//default:trkpt', ns)
    gps_data = []

    for trkpt in trackpoints:
        # Extract lat/lon
        lat = trkpt.get('lat')
        lon = trkpt.get('lon')

        if lat is None or lon is None:
            continue
        lat = float(lat)
        lon = float(lon)

        # Extract time
        time_elem = trkpt.find('default:time', ns)
        if time_elem is None or not time_elem.text:
            # If there's no time, skip
            continue
        
        # Convert time from ISO8601 to epoch seconds
        timestamp_seconds = int(datetime.datetime.fromisoformat(
            time_elem.text[:-5] + "Z"
        ).timestamp())

        # Optional: extract elevation (ele) and set as altitude
        ele_elem = trkpt.find('default:ele', ns)
        altitude = float(ele_elem.text) if ele_elem is not None else 0.0

        # Construct the dictionary for this trackpoint
        point_data = {
            "timestamp": str(timestamp_seconds),  # Stored as string
            "latitude": lat,
            "longitude": lon,
            "altitude": altitude,
        }
        gps_data.append(point_data)

    return gps_data

# ADDED FOR LAST UPLOADED TIME
def filter_by_last_uploaded_time(gps_data, last_uploaded_time):
    """
    Given gps_data (list of dicts) and a last_uploaded_time (int),
    return only the points whose timestamp > last_uploaded_time.
    """
    filtered = []
    for point in gps_data:
        ts = int(point["timestamp"])  # convert string to int
        if ts > last_uploaded_time:
            filtered.append(point)
    return filtered

def post_gps_data(base_url, api_key, gps_data):
    """
    Posts the GPS data to the specified endpoint with `api_key` as a GET parameter.
    The path '/api/v1/gps/batch' is statically appended.
    """
    url = base_url.rstrip('/') + BASE_API_PATH
    params = {"api_key": api_key}
    payload = {"gps_data": gps_data}

    try:
        print(url, params, "[%d trackpoints]" % len(gps_data))
        response = requests.post(url, params=params, json=payload)
        response.raise_for_status()
        print(f"Data successfully posted to {url} (status code: {response.status_code})")
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"Error posting data to {url}: {e}")
        return False

def download_and_send_activities(api, base_url, api_key, config):
    """
    Retrieves all activities from Garmin, filters out indoor/excluded,
    downloads GPX for each, parses it, and sends it to the given API.
    Also skips trackpoints older than `config["last_uploaded_time"]`.
    """
    try:
        print("\nDownloading all available activities...\n")
        start = 0
        limit = 100
        total_sent = 0
        failed_activities = []

        # ADDED FOR LAST UPLOADED TIME
        last_uploaded_time = config["last_uploaded_time"]

        while True:
            print(f"Fetching activities {start} to {start + limit}...")
            activities = api.get_activities(start=start, limit=limit)

            if not activities:
                print("\nNo more activities found.")
                break

            for activity in activities:
                activity_id = activity["activityId"]
                activity_name = activity["activityName"]

                # Skip indoor activities
                if is_activity_indoor(activity):
                    print(f"Skipping indoor or excluded activity: {activity_name} ({activity_id})")
                    continue

                print(f"Downloading GPX for activity {activity_name} ({activity_id})...")
                gpx_data = safe_download(api, activity_id, api.ActivityDownloadFormat.GPX)
                if gpx_data is None:
                    print(f"Skipping activity {activity_id} due to repeated download failures.")
                    failed_activities.append(activity_id)
                    continue

                # Parse GPX into JSON
                gps_data = parse_gpx_to_json(gpx_data)
                if not gps_data:
                    print(f"No valid trackpoints found for activity {activity_id}. Skipping.")
                    continue

                # ADDED FOR LAST UPLOADED TIME: filter out points older/equal to last_uploaded_time
                new_points = filter_by_last_uploaded_time(gps_data, last_uploaded_time)
                if not new_points:
                    print(f"All points in activity {activity_id} are older than last uploaded time. Skipping.")
                    continue

                # Send data to the endpoint
                success = post_gps_data(base_url, api_key, new_points)
                if success:
                    # ADDED FOR LAST UPLOADED TIME: update the config with new max timestamp
                    max_ts = max(int(p["timestamp"]) for p in new_points)
                    if max_ts > last_uploaded_time:
                        last_uploaded_time = max_ts
                        config["last_uploaded_time"] = last_uploaded_time
                        save_config(config)  # Save after each successful post

                    total_sent += len(new_points)

            start += limit  # Move to next batch

        # If any failed activities, log them
        if failed_activities:
            with open("failed_activities.txt", "w") as file:
                for act_id in failed_activities:
                    file.write(f"{act_id}\n")
            print(f"\nFailed to download {len(failed_activities)} activities. See 'failed_activities.txt'.")

        print(f"\nTotal trackpoints sent: {total_sent}")

    except Exception as err:
        logger.error(f"Error processing activities: {err}")

def main():
    """Main entry point."""
    # Load config or create a default one
    config = load_config()

    email = config["email"]
    password = config["password"]
    api_key = config["api_key"]
    base_url = config["base_url"]

    # Log in to Garmin
    try:
        api = Garmin(email, password)
        api.login()
        print("Successfully logged in to Garmin.\n")
    except GarminConnectAuthenticationError as auth_err:
        logger.error(f"Authentication error: {auth_err}")
        sys.exit(1)

    # Download and send all activities
    download_and_send_activities(api, base_url, api_key, config)

    print("\nAll activities processed. Exiting...")
    sys.exit(0)

if __name__ == "__main__":
    main()
